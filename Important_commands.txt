
1.df_train.isnull().sum(axis = 0).sort_values(ascending=False): will display null values in each column in descending order
2.new_data = df_train.dropna(thresh =len(df_train) * .8 , axis = 1):droping column where more than 80% values are null
3.df['a'] = df['a'].astype(float): this will convert data type of column a to float.
4.df.drop(['B', 'C'], axis=1): will drop column B and C from dataframe
5.df['tweet'].apply(lambda x : len(x.split())) #here calculating word counts of each tweet :we can pass a user-defined function and apply   it to every single data point of the Pandas series
6.data["Team"].isin(["Engineering", "Distribution"]):selects rows having a particular(or Multiple) value in a particular column in df.
7.new_df = df.copy(): Copying the dataframe
8.df['diagnosis'].value_counts(): will give count of each unique values in column
9.cat_columns = df.select_dtypes(['cat_names']).columns: to select automatically all columns with a certain dtype in a dataframe 
10.df[df.columns[2:]] : selecting all columns excluding first 2 in dataframe  
11.dataset.isnull().sum(): will give no of null values in each column
12.df.columns.difference(['Class']: select the column except 'class' column, you can also give multiple entries
13.df[df.columns[8]] : selecting column by its index 
14.data[data.columns] = data[data.columns].replace(0,np.NaN): replacing 0 values in selected columns with nan.
15.df.fillna(0) : this command fill replace the nan values with 0 in entire dataset
16.d = {'Y': 1, 'N': 0}
  df['Hired'] = df['Hired'].map(d) :we can use dict & map to convert categorical data to numeric data this will map Y as 1 in hired attr.
17.colnames=['TIME', 'X', 'Y', 'Z'] 
  user1 = pd.read_csv('dataset/1.csv', names=colnames, header=None) : to give name of headers in df while reading df 
18.x = np.arange(-3, 3, 0.001): parameter values-(start,stop,step_size) generate values from start to stop with diff of step_size
19.df.loc[i,:]=1,2,3 : adding new row at ith position into dataframe 
20. df.loc[:,'foo'] = 42: this commands add 42 to all rows of foo column
21.movieProperties = ratings.groupby('movie_id').agg({'rating': [np.size, np.mean]}) : will group entire dataset by movie ID and calculate    total no of ratings and average rating for each movie corresponding to rating column in ratings dataframe.
   >movieProperties['rating']['size'] :accessing size column 
22.pd.options.display.float_format = '{:.2f}'.format: round values to two decimal places in python pandas 
23.to drop columns: 1.df.drop(['B', 'C'], axis=1), 2. df.drop(columns=['B', 'C']) 
   to drop rows: 1. df.drop([0, 1])  , pars: 1.axis=default:0(row), 1(col) , 2.inplace=default: False(doesn't affect orig df)
24. plt.savefig('path', format='png'): saving plot as png at given path
25.df.sort_values(['Years Experience']):Sorting your DataFrame by a specific column 
