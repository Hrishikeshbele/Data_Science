> 1.'%matplotlib inline' in a Notebook causes plots to be shown as static images, only 1 call to %matplotlib inline is required.          2. '%matplotlib notebook' in a Notebook enables some interactive features.you have to call this before every plot otherwise I get a     non-rendered object in return.Another way to look at it is that the inline backend effectively closes thefigure object after executing   each cell, while the notebook backend leaves the figure object open.

> diff styles in matplotlib: https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html 
> saving figure: plt.savefig('C:\\Users\\Frank\\MyPlot.png', format='png')
> adding grid to figure: axes = plt.axes() 
                                axes.grid()
>cmap: is the colormap that should be used to display the plot.
ex. 1.plt.cm.Set1 2.plt.cm.jet
link: https://matplotlib.org/examples/color/colormaps_reference.html  (# diff set of colormap)
                                
1.adding subplots:
>so if you define a subplot as (2,3,1), that means to break the subplot into a 2 x 3 grid, and place the new subplot in the
 first cell of that grid.The last number indicates which of those cells to use here 1.
>ex. fig = plt.figure(figsize=(8,8)) # splitting our figure in 2 portions(1 row, 2 column)
     ax1 =fig.add_subplot(1, 2, 1)
     plt.show()
     
2.subplot2grid():
>plt.subplot2grid((3, 2), (0, 0), rowspan=2, colspan=1):  split out grid up into 3 rows by 2 columns, and set our starting index to the top
left cell. Finally, we need to tell our subplot to take up two of our three rows and 1 column .

3.scatterplots: 
>scatter draws points without lines connecting them. allows you to apply a different formatting for each data point (color, marker shape, etc...)
ex. matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None)
 >s: The marker size,c : sequence of color,marker:The marker style,cmap :cmap is only used if c is an array of floats.
 
4. plots:
>plot joins the dots with a line by default (unless you deactivate the line).typically suited to data series of the same type.
ex. plot(x, y, 'bo')  # plot x and y using blue circle markers

5.histogram:
ex.plt.hist(values, 50) #plot histogram with values vector and 50 bins

6.pie chart:
values represent % of portion to each label ,color represent color of each portion and explode to show pulled out parts
ex.plt.pie(values,colors=colors,labels=labels,explode=explode)

7.bar chart:
pars: (x coordinates of the bars, values at bars, color of each bar)
ex. plt.bar(range(0,5), values, color= colors)

8.scatter plot:
ex. plt.scatter(X,Y,c='r') # c par for color

9.boxplot:
ex.plt.boxplot(x)

10.contour plot: 
>to Plot contours. 
ex. plt.contourf(x,y,z, levels=[10, 30, 50])
pars: 1.z=height values over which the contour is drawn
      2.levels=Determines the number and positions of the contour lines / regions.
      3.x,y=The coordinates of the values in Z
11.figure:
The purpose of using plt.figure() is to create a figure object.It is necessary to explicitly use plt.figure() when we want to tweak the size of the figure rather than default size and when we want to add multiple Axes objects in a single figure.
    ex. fig=plt.figure(figsize=(12,8))
    #Add a centered title to the figure.
    fig.suptitle('RSS - Regression coefficients', fontsize=20)
    #add subplot to figure
    ax2 = fig.add_subplot(122, projection='3d')
    plt.show()

